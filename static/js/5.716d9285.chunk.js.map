{"version":3,"sources":["components/playlist/components/Clear.js","components/playlist/components/Form.js","components/playlist/components/Import.js","components/playlist/components/Url.js","components/playlist/index.js","api/youtube.js","utils/createNotification.js","utils/formatPlaylist.js","utils/formatVideosInfos.js","utils/getPlaylistId.js","utils/getVideoId.js","utils/getYoutubeId.js","utils/mergeInfos.js","utils/index.js","components/Notification.js","components/Header.js","components/Video.js","components/List.js","components/index.js"],"names":["Clear","props","React","useState","open","setOpen","handleClose","Button","onClick","variant","color","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","clear","autoFocus","Form","handleChange","handleSubmit","loading","urlInputValue","onSubmit","Grid","container","alignItems","spacing","item","TextField","label","placeholder","value","onChange","CircularProgress","size","Fab","type","aria-label","Add","Import","url","setUrl","error","setError","setLoading","helperText","margin","fullWidth","event","target","disabled","import","getPlaylistId","handleGetPlaylistId","Url","notification","setNotification","openNotification","setOpenNotification","copyCodeToClipboard","navigator","clipboard","writeText","createNotification","playlistUrl","playlist","baseUrl","forEach","video","createPlaylistUrl","direction","defaultValue","InputProps","readOnly","className","Notification","useStyles","makeStyles","theme","playlistContainer","padding","Playlist","classes","setUrlInputValue","setPlaylist","a","preventDefault","youtubeId","getYoutubeId","handleCheckIfVideoExist","getVideoInfo","videoInfos","length","formatVideosInfos","videos","handleOpenNotification","i","handleCloseNotification","formatPlaylist","playlistFormated","justify","title","subtitle","handleDeleteVideo","index","newPlayList","splice","KEY","process","axios","get","params","part","key","response","data","items","getChannelInfo","getVideosFromPlaylist","playlistId","maxResults","getVideosBySearch","search","q","message","newVideosInfos","snippet","resourceId","videoId","push","formatedVideos","channelId","channelInfos","finalVideo","mergeInfos","exec","getVideoId","undefined","split","variantIcon","success","CheckCircle","warning","Warning","ErrorIcon","info","Info","backgroundColor","green","palette","dark","primary","main","amber","icon","fontSize","iconVariant","opacity","marginRight","display","anchorOrigin","vertical","horizontal","autoHideDuration","MySnackbarContentWrapper","other","Icon","clsx","action","Header","Typography","videoCard","width","height","boxShadow","videoThumbnail","maxWidth","maxHeight","avatar","Video","deleteVideo","Card","CardHeader","Avatar","src","thumbnails","default","channelTitle","Delete","CardActionArea","window","location","CardMedia","component","image","medium","CardContent","List","map"],"mappings":"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","file":"static/js/5.716d9285.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\r\n\r\nexport default function Clear(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true);\r\n    };\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={handleClickOpen} variant=\"contained\" color=\"secondary\">\r\n                clear playlist\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Clear the entire playlist ?\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        This will result in the deletion of all videos you have added manually. \r\n                        Starting all over again can be quite long and frustrating.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        no !\r\n                    </Button>\r\n                    <Button onClick={props.clear} color=\"secondary\" autoFocus>\r\n                        clear\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>       \r\n    );\r\n}\r\n","import React from 'react';\r\nimport {CircularProgress, Fab, Grid, TextField } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\n\r\nexport default function Form(props) {\r\n    const { handleChange, handleSubmit, loading, urlInputValue } = props;\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Grid container alignItems=\"center\" spacing={2}>\r\n                <Grid item>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"Youtube video link\"\r\n                        placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\r\n                        value={urlInputValue}\r\n                        onChange={handleChange}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    {loading ? (\r\n                        <CircularProgress size={30} />\r\n                    ) : (\r\n                        <Fab\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            aria-label=\"add\"\r\n                            size=\"small\"\r\n                        >\r\n                            <Add />\r\n                        </Fab>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { \r\n    Button, \r\n    CircularProgress, \r\n    Dialog, \r\n    DialogActions, \r\n    DialogContent, \r\n    DialogContentText, \r\n    DialogTitle, \r\n    TextField\r\n} from '@material-ui/core';\r\nimport { getPlaylistId } from '../../../utils';\r\n\r\nexport default function Import(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [url, setUrl] = React.useState('');\r\n    const [error, setError] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true);\r\n    };\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n        setLoading(false);\r\n    };\r\n\r\n    function handleGetPlaylistId(url) {\r\n        setLoading(true);\r\n\r\n        let id = getPlaylistId(url);\r\n\r\n        if (id) {\r\n            return id;\r\n        } else {\r\n            setLoading(false);\r\n            setError(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Button onClick={handleClickOpen} variant=\"contained\" color=\"primary\">\r\n                import playlist\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Import playlist\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Import an existing playlist on youtube. \r\n                        You can then modify it to create a new playlist.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        error={error}\r\n                        helperText={error ? \"Invalid url\" : null}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"url\"\r\n                        label=\"Youtube playlist url\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        value={url}\r\n                        onChange={(event) => setUrl(event.target.value)}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={handleClose} \r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                    >\r\n                        cancel\r\n                    </Button>\r\n                    <Button \r\n                        onClick={() => props.import(handleGetPlaylistId(url))} \r\n                        color=\"primary\" \r\n                        autoFocus\r\n                        disabled={loading}\r\n                    >\r\n                        import\r\n                    </Button>\r\n                    {loading && <CircularProgress size={30} />}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>       \r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport Notification from '../../Notification';\r\nimport { createNotification } from '../../../utils';\r\n\r\nexport default function Url (props) {\r\n    const [notification, setNotification] = React.useState({})\r\n    const [openNotification, setOpenNotification] = React.useState(false)\r\n\r\n    function copyCodeToClipboard(url) {\r\n        navigator.clipboard.writeText(url)\r\n        \r\n        setNotification(createNotification(\"Copied!\", \"success\"))\r\n        \r\n        handleOpenNotification()\r\n    }\r\n\r\n    function handleOpenNotification() {\r\n        setOpenNotification(true);\r\n    }\r\n\r\n    function handleCloseNotification() {\r\n        setOpenNotification(false);\r\n    }\r\n\r\n    function createPlaylistUrl(playlist) {\r\n        let baseUrl = \"http://www.youtube.com/watch_videos?video_ids=\"\r\n        \r\n        playlist.forEach(video => {\r\n            baseUrl += `${video.id},`\r\n        });\r\n\r\n        return baseUrl;\r\n    }\r\n   \r\n    const playlistUrl = createPlaylistUrl(props.playlist);\r\n\r\n    return (\r\n        <Grid container direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            <Grid item>\r\n                <TextField \r\n                    label=\"Your playlist URL\"\r\n                    defaultValue={playlistUrl}\r\n                    InputProps={{\r\n                        readOnly: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    className=\"url\"\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <Button \r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => copyCodeToClipboard(playlistUrl)}\r\n                >\r\n                    Copy\r\n                </Button>\r\n            </Grid>\r\n            <Grid item>\r\n                <Notification \r\n                    notification={notification} \r\n                    open={openNotification} \r\n                    handleClose={handleCloseNotification}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Clear, Form, Import, Url } from './components';\r\nimport { Header, List, Notification } from '../'\r\nimport { getVideoInfo } from '../../api/youtube';\r\nimport { createNotification, formatPlaylist, formatVideosInfos, getYoutubeId} from \"../../utils\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    playlistContainer: {\r\n        padding: \"15px\"\r\n    }\r\n}));\r\n\r\nexport default function Playlist (props) {\r\n    const classes = useStyles();\r\n    const [urlInputValue, setUrlInputValue] = useState('');\r\n    const [playlist, setPlaylist] = useState([]);\r\n    const [notification, setNotification] = useState({});\r\n    const [openNotification, setOpenNotification] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    function handleChange(event) {\r\n        setUrlInputValue(event.target.value);\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        setLoading(true);\r\n\r\n        event.preventDefault();\r\n\r\n        const youtubeId = getYoutubeId(urlInputValue);\r\n        \r\n        if (youtubeId) {\r\n            const isAlreadyAdded = handleCheckIfVideoExist(youtubeId);\r\n          \r\n            if (!isAlreadyAdded) {\r\n                let videoInfos = await getVideoInfo(youtubeId);\r\n\r\n                if (videoInfos.length > 0) {\r\n                    let videos = await formatVideosInfos(videoInfos);\r\n            \r\n                    setPlaylist((playlist) => [...playlist, videos[0]]);\r\n                    \r\n                    setNotification(createNotification(\"Video added !\", \"success\"));\r\n                } else {\r\n                    setNotification(createNotification(\"Video does not exist\", \"error\"));\r\n                }\r\n            } else {\r\n                setNotification(createNotification(\"Video already added !\", \"error\"));\r\n            }\r\n        } else {\r\n            setNotification(createNotification(\"Not a valid url !\", \"error\"));\r\n        }\r\n\r\n        setUrlInputValue('');\r\n        setLoading(false);\r\n        handleOpenNotification();\r\n    }\r\n\r\n    function handleClear() {\r\n        setPlaylist([]);\r\n        setNotification(createNotification(\"Playlist cleared !\", \"success\"));\r\n        handleOpenNotification();\r\n    }\r\n\r\n    function handleCheckIfVideoExist(id) {\r\n        for (let i = 0; i < playlist.length; i++) {\r\n            if (playlist[i].id === id) {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleOpenNotification() {\r\n        setOpenNotification(true)\r\n    }\r\n\r\n    function handleCloseNotification() {\r\n        setOpenNotification(false)\r\n    }\r\n    \r\n    function handleDeleteVideo(id) {\r\n        for (let i = 0; i < playlist.length; i++) {\r\n            if (playlist[i].id === id) {\r\n                const index = i;\r\n                \r\n                let newPlayList = [...playlist];\r\n        \r\n                newPlayList.splice(index, 1);\r\n                \r\n                setPlaylist(newPlayList);\r\n                setNotification(createNotification(\"Video deleted !\", \"success\"));\r\n                handleOpenNotification();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleImportPlaylist(id) {        \r\n        let playlistFormated = await formatPlaylist(id);\r\n\r\n        if (playlistFormated.length >= 0) {\r\n            setPlaylist(playlistFormated);\r\n            setNotification(createNotification(\"Playlist was imported !\", \"success\"));\r\n        } else {\r\n            setPlaylist([]);\r\n            setNotification(createNotification(\"Error when importing!\", \"error\"));\r\n        }\r\n        \r\n        handleOpenNotification();\r\n    }\r\n\r\n    return (\r\n        <Grid container className={classes.playlistContainer}>\r\n            <Grid item>\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\"\r\n                    spacing={2}\r\n                >\r\n                    <Grid item>\r\n                        <Header \r\n                            title={\"Youtube-playlist\"} \r\n                            subtitle={\"Create youtube playlist without google account\"}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Form \r\n                            urlInputValue={urlInputValue} \r\n                            handleChange={handleChange} \r\n                            handleSubmit={handleSubmit}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {playlist.length > 0 ? (\r\n                            <Clear clear={handleClear} />\r\n                        ) : (\r\n                            <Import import={handleImportPlaylist} />\r\n                        )}\r\n                        </Grid>\r\n                    <Grid item>\r\n                        {playlist.length > 0 && (\r\n                            <List\r\n                                playlist={playlist} \r\n                                handleDeleteVideo={handleDeleteVideo}\r\n                            />\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {playlist.length > 0 && (\r\n                            <Url \r\n                                playlist={playlist} \r\n                                handleCloseNotification={handleCloseNotification}\r\n                            />\r\n                        )} \r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Notification \r\n                            notification={notification} \r\n                            open={openNotification}\r\n                            handleClose={handleCloseNotification}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nconst KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\r\n\r\nexport const getVideoInfo = async function(id) {\r\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/videos', {\r\n        params: {\r\n            part: \"snippet\",\r\n            id: id,\r\n            key: KEY\r\n        }\r\n    })\r\n    \r\n    return response.data.items\r\n}\r\n\r\nexport const getChannelInfo = async function(id) {\r\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/channels', {\r\n        params: {\r\n            part: \"snippet\",\r\n            id: id,\r\n            key: KEY\r\n        }\r\n    })\r\n    \r\n    return response.data.items\r\n}\r\n\r\nexport const getVideosFromPlaylist = async function(id) {\r\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/playlistItems', {\r\n        params: {\r\n            part: \"snippet\",\r\n            playlistId: id,\r\n            maxResults: 50,\r\n            key: KEY\r\n        }\r\n    })\r\n    \r\n    return response.data.items\r\n}\r\n\r\nexport const getVideosBySearch = async function(search) {\r\n    const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\r\n        params: {\r\n            part: \"snippet\",\r\n            q: search,\r\n            maxResults: 50,\r\n            type: \"video\",\r\n            key: KEY\r\n        }\r\n    })\r\n    \r\n    return response.data.items\r\n}","export const createNotification = function(message, color) {\r\n    return { color: color, message: message }\r\n}","import { getVideoInfo, getVideosFromPlaylist } from '../api/youtube';\r\nimport { formatVideosInfos } from './';\r\n\r\nexport const formatPlaylist = async function(id) {\r\n    let videos = await getVideosFromPlaylist(id);\r\n    let newVideosInfos = []\r\n\r\n    for (let video of videos) {\r\n        let videoInfos = await getVideoInfo(video.snippet.resourceId.videoId);\r\n       \r\n        newVideosInfos.push(videoInfos[0]);\r\n    }\r\n    \r\n    let formatedVideos = await formatVideosInfos(newVideosInfos);\r\n\r\n    return formatedVideos;\r\n}","import { getChannelInfo } from '../api/youtube';\r\nimport { mergeInfos } from './';\r\n\r\nexport const formatVideosInfos = async function(videos) {\r\n    let formatedVideos = []\r\n\r\n    for (let video of videos) {\r\n        let channelInfos = await getChannelInfo(video.snippet.channelId);\r\n        let finalVideo = mergeInfos(video, channelInfos);\r\n        \r\n        formatedVideos.push(finalVideo);\r\n    }\r\n\r\n    return formatedVideos;\r\n};\r\n","export const getPlaylistId = function(url) {\r\n    let id = /[&|?]list=([a-zA-Z0-9_-]+)/gi.exec(url)\r\n\r\n    return (id && id.length > 0) ? id[1] : false;\r\n}\r\n","export const getVideoId = function(video) {\r\n    if (video && video.id) {\r\n        if (typeof(video.id) === \"string\") {\r\n            return video.id\r\n        } else if (video.id.videoId) {\r\n            return video.id.videoId;\r\n        } else {\r\n            return '';\r\n        }\r\n    } else return '';\r\n}","export const getYoutubeId = function(url) {\r\n    url = url.split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\r\n\r\n    return (url[2] !== undefined) ? url[2].split(/[^0-9a-z_-]/i)[0] : false;\r\n}","export const mergeInfos = function(videoInfos, channelInfos) {\r\n    videoInfos[\"snippet\"][\"channelInfos\"] = channelInfos[0]\r\n\r\n    return videoInfos;\r\n};\r\n","export { createNotification } from './createNotification';\r\nexport { formatPlaylist } from './formatPlaylist';\r\nexport { formatVideosInfos } from './formatVideosInfos';\r\nexport { getPlaylistId } from './getPlaylistId';\r\nexport { getVideoId } from './getVideoId';\r\nexport { getYoutubeId } from './getYoutubeId';\r\nexport { mergeInfos } from './mergeInfos';\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { Snackbar, SnackbarContent, IconButton, makeStyles } from '@material-ui/core';\r\nimport { Close, CheckCircle, Warning, Error as ErrorIcon, Info } from '@material-ui/icons';\r\nimport { amber, green } from '@material-ui/core/colors';\r\n\r\nconst variantIcon = {\r\n    success: CheckCircle,\r\n    warning: Warning,\r\n    error: ErrorIcon,\r\n    info: Info,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nexport default function Notification(props) {\r\n    const { color, message } = props.notification;\r\n    const { handleClose, open } = props;\r\n    \r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            }}\r\n            open={open}\r\n            autoHideDuration={2500}\r\n            onClose={handleClose}\r\n        >\r\n            <MySnackbarContentWrapper\r\n                onClose={handleClose}\r\n                variant={color}\r\n                message={message}\r\n            />\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles();\r\n    const { className, message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\r\n                    <Close className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function Header(props) {\r\n    const { title, subtitle } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\">{title}</Typography>\r\n            <Typography>\r\n                {subtitle}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Avatar, Card, CardActionArea, CardContent, CardHeader, CardMedia, Fab, makeStyles } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    videoCard: {\r\n        width: \"320px\",\r\n        height: \"340px\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)\"\r\n        },\r\n    },\r\n    videoThumbnail: {\r\n        maxWidth: \"320px\",\r\n        maxHeight: \"180px\"\r\n    },\r\n    avatar: {\r\n        maxWidth: \"30px\",\r\n        maxHeight: \"30px\"\r\n    }\r\n}));\r\n\r\nexport default function Video(props) {\r\n    const classes = useStyles();\r\n    const { channelInfos, deleteVideo, videoInfos, videoId } = props;\r\n\r\n    return (\r\n        <Card className={classes.videoCard}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar \r\n                        className={classes.avatar} \r\n                        aria-label=\"channel\"\r\n                        src={channelInfos && channelInfos.snippet.thumbnails && channelInfos.snippet.thumbnails.default.url}\r\n                    > \r\n                        {videoInfos.channelTitle[0]} \r\n                    </Avatar>\r\n                }\r\n                action={deleteVideo && (\r\n                    <Fab\r\n                        onClick={() => deleteVideo(videoId)}\r\n                        color=\"secondary\"\r\n                        aria-label=\"delete\"\r\n                        size=\"small\"\r\n                    >\r\n                        <Delete />\r\n                    </Fab>\r\n                )}\r\n                title={videoInfos.channelTitle}\r\n            >\r\n            </CardHeader>\r\n            <CardActionArea onClick={() => window.location = `/player/${videoId}`}>\r\n                <CardMedia\r\n                    component=\"img\"\r\n                    image={videoInfos.thumbnails.medium.url}\r\n                    className={classes.videoThumbnail}\r\n                />\r\n            </CardActionArea>\r\n            <CardContent>\r\n                {videoInfos.title}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Video from './Video'\r\nimport { getVideoId } from '../utils';\r\n\r\nexport default function List(props) {\r\n    const { justify, handleDeleteVideo, playlist } = props;\r\n\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            <Grid item>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify={justify ? justify : \"flex-start\"}\r\n                    alignItems=\"flex-start\"\r\n                    spacing={2}\r\n                >\r\n                    {playlist.map((video, index) => \r\n                        <Grid item key={index}>\r\n                            <Video\r\n                                videoId={getVideoId(video)}\r\n                                videoInfos={video.snippet}\r\n                                channelInfos={video.snippet.channelInfos}\r\n                                deleteVideo={handleDeleteVideo && handleDeleteVideo}\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","export { default as Header } from './Header';\r\nexport { default as List } from './List';\r\nexport { default as Notification } from './Notification';\r\nexport { default as Video } from './Video';\r\n"],"sourceRoot":""}