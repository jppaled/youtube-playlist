{"version":3,"sources":["Playlist/Components/Header.js","Playlist/Components/Form.js","Playlist/Components/List.js","Playlist/Components/Notification.js","Playlist/Components/Url.js","Playlist/Playlist.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Form","onSubmit","handleSubmit","htmlFor","type","id","placeholder","value","onChange","handleChange","onFocus","handleResetNotification","List","list","map","link","index","key","onClick","handleDeleteVideo","handleClear","Notification","style","color","notification","text","Url","state","copyCodeToClipboard","bind","navigator","clipboard","writeText","this","paragraph","textContent","setState","url","href","ref","React","Component","Playlist","event","target","preventDefault","youtubeId","getYoutubeId","includes","handleCreateNotification","newList","splice","undefined","split","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.795cd94a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div>\r\n            <h1>Youtube-playlist</h1>\r\n            <p>Create youtube playlist without google account</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Form(props) {\r\n    return (\r\n        <div>\r\n            <h2>Add video</h2>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <label htmlFor=\"link\"> Youtube video link:\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"link\"\r\n                        placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\r\n                        value={props.value}\r\n                        onChange={props.handleChange}\r\n                        onFocus={props.handleResetNotification}\r\n                    />\r\n                </label>\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </form>\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nfunction List(props) {\r\n    return (\r\n        <div>\r\n            <h2>Videos added</h2>\r\n            <ul>\r\n                {props.list.map((link, index) =>\r\n                <li key={index}>\r\n                    {link} \r\n                    <button onClick={() => props.handleDeleteVideo(index)}>\r\n                        Delete\r\n                    </button>\r\n                </li>\r\n                )}\r\n            </ul>\r\n            <button onClick={props.handleClear}>Clear</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nfunction Notification(props) {\r\n    return (\r\n        <div>\r\n           <p style={{color: props.notification.color}}>{props.notification.text}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\nimport Notification from './Notification';\r\n\r\nclass Url extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            notification: {}    \r\n        }\r\n\r\n        this.copyCodeToClipboard = this.copyCodeToClipboard.bind(this);\r\n    }\r\n\r\n    copyCodeToClipboard() {\r\n        navigator.clipboard.writeText(this.paragraph.textContent);\r\n        \r\n        this.setState({ notification: {text: \"Copied!\", color: \"green\"} })\r\n    }\r\n\r\n    render() {\r\n        let url = `http://www.youtube.com/watch_videos?video_ids=${this.props.list.map((link) => `${link},`)}`;\r\n\r\n        return (\r\n            <div>\r\n                <h2>Your URL</h2>\r\n                <a href={url} ref={(paragraph) => this.paragraph = paragraph}>\r\n                   {url}\r\n                </a>\r\n                <br />\r\n                <button onClick={this.copyCodeToClipboard}>Copy</button>\r\n                <Notification notification={this.state.notification} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Url;","import React from 'react';\r\nimport Header from './Components/Header';\r\nimport Form from './Components/Form';\r\nimport List from './Components/List';\r\nimport Url from './Components/Url';\r\nimport Notification from './Components/Notification';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: '',\r\n            list: [],\r\n            notification: {}\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.handleResetNotification = this.handleResetNotification.bind(this);\r\n        this.handleDeleteVideo = this.handleDeleteVideo.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const youtubeId = this.getYoutubeId(this.state.value);\r\n        \r\n        if (youtubeId) {\r\n            const isAlreadyAdded = this.state.list.includes(youtubeId);\r\n            \r\n            if (!isAlreadyAdded) {\r\n                this.setState({\r\n                    list: [...this.state.list, youtubeId],\r\n                    notification: this.handleCreateNotification(\"Video added !\", \"green\")\r\n                })\r\n            } else {\r\n                this.setState({ notification: this.handleCreateNotification(\"Video already added !\", \"red\") })\r\n            }\r\n        } else {\r\n            this.setState({ notification: this.handleCreateNotification(\"Not a valid url !\", \"red\") })\r\n        }\r\n\r\n        this.setState({ value: '' })\r\n    }\r\n\r\n    handleClear() {\r\n        this.setState({\r\n            list: [],\r\n            notification: this.handleCreateNotification(\"Video list cleared !\", \"green\")\r\n        })\r\n    }\r\n\r\n    handleCreateNotification(text, color) {\r\n        return { color: color, text: text }\r\n    }\r\n\r\n    handleResetNotification() {\r\n       \r\n        this.setState({ notification: [] });\r\n    }\r\n\r\n    handleDeleteVideo(index) {\r\n        let newList = [...this.state.list];\r\n        \r\n        newList.splice(index, 1);\r\n\r\n        this.setState({ list: newList })\r\n    }\r\n\r\n    getYoutubeId(url) {\r\n        url = url.split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\r\n\r\n        return (url[2] !== undefined) ? url[2].split(/[^0-9a-z_-]/i)[0] : false;\r\n    }\r\n\r\n    render() {\r\n        const {list, notification, value} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Form \r\n                    value={value} \r\n                    handleChange={this.handleChange} \r\n                    handleSubmit={this.handleSubmit}\r\n                    handleResetNotification={this.handleResetNotification}\r\n                />\r\n                <Notification notification={notification} />\r\n                <List \r\n                    list={list} \r\n                    handleClear={this.handleClear}\r\n                    handleDeleteVideo={this.handleDeleteVideo}\r\n                />\r\n                <Url list={list} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport Playlist from './Playlist/Playlist'\n\nfunction App() {\n  return (\n    <div>\n      <Playlist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}