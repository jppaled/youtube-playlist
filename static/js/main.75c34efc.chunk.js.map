{"version":3,"sources":["Playlist/Components/List.js","Playlist/Components/Url.js","Playlist/Components/Notification.js","Playlist/Playlist.js","App.js","serviceWorker.js","index.js"],"names":["List","props","list","map","link","index","key","Url","copyCodeToClipboard","bind","navigator","clipboard","writeText","this","paragraph","textContent","alert","url","href","ref","onClick","React","Component","Notification","style","color","notification","text","Playlist","state","value","handleChange","handleSubmit","handleClear","event","setState","target","preventDefault","youtubeId","getYoutubeId","handleCreateNotification","undefined","split","onSubmit","htmlFor","type","id","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAiBeA,MAff,SAAcC,GACV,OACI,6BACI,4CACA,4BACKA,EAAMC,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAIC,IAAKD,GACJD,SCsBVG,E,YA5BX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAHZ,E,mFAOfC,UAAUC,UAAUC,UAAUC,KAAKC,UAAUC,aAE7CC,MAAM,qC,+BAGA,IAAD,OACDC,EAAG,wDAAoDJ,KAAKZ,MAAMC,KAAKC,KAAI,SAACC,GAAD,gBAAaA,EAAb,SAE/E,OACI,6BACI,wCACA,uBAAGc,KAAMD,EAAKE,IAAK,SAACL,GAAD,OAAe,EAAKA,UAAYA,IAC/CG,GAEJ,6BACA,4BAAQG,QAASP,KAAKL,qBAAtB,a,GAvBEa,IAAMC,WCQTC,MARf,SAAsBtB,GAClB,OACI,6BACG,uBAAGuB,MAAO,CAACC,MAAOxB,EAAMyB,aAAaD,QAASxB,EAAMyB,aAAaC,QCkF7DC,E,YAjFX,WAAY3B,GAAQ,IAAD,8BACf,4CAAMA,KACD4B,MAAQ,CACTC,MAAO,GACP5B,KAAM,GACNwB,aAAc,IAGlB,EAAKK,aAAe,EAAKA,aAAatB,KAAlB,gBACpB,EAAKuB,aAAe,EAAKA,aAAavB,KAAlB,gBACpB,EAAKwB,YAAc,EAAKA,YAAYxB,KAAjB,gBAVJ,E,0EAaNyB,GACTrB,KAAKsB,SAAS,CAAEL,MAAOI,EAAME,OAAON,U,mCAG3BI,GACTA,EAAMG,iBAEN,IAAMC,EAAYzB,KAAK0B,aAAa1B,KAAKgB,MAAMC,OAE3CQ,EACAzB,KAAKsB,SAAS,CACVjC,KAAK,GAAD,mBAAMW,KAAKgB,MAAM3B,MAAjB,CAAuBoC,IAC3BZ,aAAcb,KAAK2B,yBAAyB,gBAAiB,WAGjE3B,KAAKsB,SAAS,CAAET,aAAcb,KAAK2B,yBAAyB,oBAAqB,SAGrF3B,KAAKsB,SAAS,CAAEL,MAAO,O,oCAIvBjB,KAAKsB,SAAS,CACVjC,KAAM,GACNwB,aAAcb,KAAK2B,yBAAyB,uBAAwB,a,+CAInDb,EAAMF,GAC3B,MAAO,CAAEA,MAAOA,EAAOE,KAAMA,K,mCAGpBV,GAGT,YAAmBwB,KAFnBxB,EAAMA,EAAIyB,MAAM,0CAEJ,IAAoBzB,EAAI,GAAGyB,MAAM,gBAAgB,K,+BAI7D,OACI,6BACI,gDACA,6EACA,yCACA,0BAAMC,SAAU9B,KAAKmB,cACjB,2BAAOY,QAAQ,QAAf,uBACI,2BACIC,KAAK,OACLC,GAAG,OACHC,YAAY,8CACZjB,MAAOjB,KAAKgB,MAAMC,MAClBkB,SAAUnC,KAAKkB,gBAGvB,2BAAOc,KAAK,SAASf,MAAM,SAG/B,kBAAC,EAAD,CAAM5B,KAAMW,KAAKgB,MAAM3B,OAEvB,4BAAQkB,QAASP,KAAKoB,aAAtB,SAEA,kBAAC,EAAD,CAAK/B,KAAMW,KAAKgB,MAAM3B,OACtB,kBAAC,EAAD,CAAcwB,aAAcb,KAAKgB,MAAMH,oB,GA5EhCL,IAAMC,WCMd2B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBhD,WACrBA,UAAUiD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.75c34efc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction List(props) {\r\n    return (\r\n        <div>\r\n            <h2>Videos added</h2>\r\n            <ul>\r\n                {props.list.map((link, index) =>\r\n                    <li key={index}>\r\n                        {link}\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nclass Url extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.copyCodeToClipboard = this.copyCodeToClipboard.bind(this);\r\n    }\r\n\r\n    copyCodeToClipboard() {\r\n        navigator.clipboard.writeText(this.paragraph.textContent);\r\n        \r\n        alert('Link was past to your clipboard')\r\n    }\r\n\r\n    render() {\r\n        let url = `http://www.youtube.com/watch_videos?video_ids=${this.props.list.map((link) => `${link},`)}`;\r\n\r\n        return (\r\n            <div>\r\n                <h2>Your URL</h2>\r\n                <a href={url} ref={(paragraph) => this.paragraph = paragraph}>\r\n                   {url}\r\n                </a>\r\n                <br />\r\n                <button onClick={this.copyCodeToClipboard}>Copy</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Url;","import React from 'react';\r\n\r\nfunction Notification(props) {\r\n    return (\r\n        <div>\r\n           <p style={{color: props.notification.color}}>{props.notification.text}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\nimport List from './Components/List';\r\nimport Url from './Components/Url';\r\nimport Notification from './Components/Notification';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            list: [],\r\n            notification: {}\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        const youtubeId = this.getYoutubeId(this.state.value);\r\n\r\n        if (youtubeId) {\r\n            this.setState({\r\n                list: [...this.state.list, youtubeId],\r\n                notification: this.handleCreateNotification(\"Video added !\", \"green\")\r\n            })\r\n        } else {\r\n            this.setState({ notification: this.handleCreateNotification(\"Not a valid url !\", \"red\") })\r\n        }\r\n\r\n        this.setState({ value: '' })\r\n    }\r\n\r\n    handleClear() {\r\n        this.setState({\r\n            list: [],\r\n            notification: this.handleCreateNotification(\"Video list cleared !\", \"green\")\r\n        })\r\n    }\r\n\r\n    handleCreateNotification(text, color) {\r\n        return { color: color, text: text }\r\n    }\r\n\r\n    getYoutubeId(url) {\r\n        url = url.split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\r\n\r\n        return (url[2] !== undefined) ? url[2].split(/[^0-9a-z_-]/i)[0] : false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Youtube-playlist</h1>\r\n                <p>Create youtube playlist without google account</p>\r\n                <h2>Add video</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"link\"> Youtube video link:\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"link\"\r\n                            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Add\" />\r\n                </form>\r\n\r\n                <List list={this.state.list} />\r\n\r\n                <button onClick={this.handleClear}>Clear</button>\r\n\r\n                <Url list={this.state.list} />\r\n                <Notification notification={this.state.notification} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport Playlist from './Playlist/Playlist'\n\nfunction App() {\n  return (\n    <div>\n      <Playlist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}